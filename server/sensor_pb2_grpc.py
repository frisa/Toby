# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import sensor_pb2 as sensor__pb2


class SensorStub(object):
    def __init__(self, channel):
        self.callSensor = channel.unary_unary(
                '/gnss.Sensor/callSensor',
                request_serializer=sensor__pb2.SensorRequest.SerializeToString,
                response_deserializer=sensor__pb2.SensorReply.FromString,
                )

class SensorServicer(object):
    def callSensor(self, request, context):
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SensorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'callSensor': grpc.unary_unary_rpc_method_handler(
                    servicer.callSensor,
                    request_deserializer=sensor__pb2.SensorRequest.FromString,
                    response_serializer=sensor__pb2.SensorReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'gnss.Sensor', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))

class Sensor(object):
    @staticmethod
    def callSensor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gnss.Sensor/callSensor',
            sensor__pb2.SensorRequest.SerializeToString,
            sensor__pb2.SensorReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
