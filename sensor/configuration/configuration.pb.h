// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: configuration.proto
// Protobuf C++ Version: 5.26.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_configuration_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_configuration_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION != 5026001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_configuration_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_configuration_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_configuration_2eproto;
class SensorConfiguration;
struct SensorConfigurationDefaultTypeInternal;
extern SensorConfigurationDefaultTypeInternal _SensorConfiguration_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

enum SensorConfiguration_DeviceType : int {
  SensorConfiguration_DeviceType_GNSS0 = 0,
  SensorConfiguration_DeviceType_GNSS1 = 1,
  SensorConfiguration_DeviceType_SensorConfiguration_DeviceType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  SensorConfiguration_DeviceType_SensorConfiguration_DeviceType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool SensorConfiguration_DeviceType_IsValid(int value);
extern const uint32_t SensorConfiguration_DeviceType_internal_data_[];
constexpr SensorConfiguration_DeviceType SensorConfiguration_DeviceType_DeviceType_MIN = static_cast<SensorConfiguration_DeviceType>(0);
constexpr SensorConfiguration_DeviceType SensorConfiguration_DeviceType_DeviceType_MAX = static_cast<SensorConfiguration_DeviceType>(1);
constexpr int SensorConfiguration_DeviceType_DeviceType_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
SensorConfiguration_DeviceType_descriptor();
template <typename T>
const std::string& SensorConfiguration_DeviceType_Name(T value) {
  static_assert(std::is_same<T, SensorConfiguration_DeviceType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to DeviceType_Name().");
  return SensorConfiguration_DeviceType_Name(static_cast<SensorConfiguration_DeviceType>(value));
}
template <>
inline const std::string& SensorConfiguration_DeviceType_Name(SensorConfiguration_DeviceType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<SensorConfiguration_DeviceType_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool SensorConfiguration_DeviceType_Parse(absl::string_view name, SensorConfiguration_DeviceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SensorConfiguration_DeviceType>(
      SensorConfiguration_DeviceType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class SensorConfiguration final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:SensorConfiguration) */ {
 public:
  inline SensorConfiguration() : SensorConfiguration(nullptr) {}
  ~SensorConfiguration() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SensorConfiguration(
      ::google::protobuf::internal::ConstantInitialized);

  inline SensorConfiguration(const SensorConfiguration& from) : SensorConfiguration(nullptr, from) {}
  inline SensorConfiguration(SensorConfiguration&& from) noexcept
      : SensorConfiguration(nullptr, std::move(from)) {}
  inline SensorConfiguration& operator=(const SensorConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorConfiguration& operator=(SensorConfiguration&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SensorConfiguration& default_instance() {
    return *internal_default_instance();
  }
  static inline const SensorConfiguration* internal_default_instance() {
    return reinterpret_cast<const SensorConfiguration*>(
        &_SensorConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(SensorConfiguration& a, SensorConfiguration& b) { a.Swap(&b); }
  inline void Swap(SensorConfiguration* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SensorConfiguration* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SensorConfiguration* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<SensorConfiguration>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SensorConfiguration& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SensorConfiguration& from) { SensorConfiguration::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SensorConfiguration* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "SensorConfiguration"; }

 protected:
  explicit SensorConfiguration(::google::protobuf::Arena* arena);
  SensorConfiguration(::google::protobuf::Arena* arena, const SensorConfiguration& from);
  SensorConfiguration(::google::protobuf::Arena* arena, SensorConfiguration&& from) noexcept
      : SensorConfiguration(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------
  using DeviceType = SensorConfiguration_DeviceType;
  static constexpr DeviceType GNSS0 = SensorConfiguration_DeviceType_GNSS0;
  static constexpr DeviceType GNSS1 = SensorConfiguration_DeviceType_GNSS1;
  static inline bool DeviceType_IsValid(int value) {
    return SensorConfiguration_DeviceType_IsValid(value);
  }
  static constexpr DeviceType DeviceType_MIN = SensorConfiguration_DeviceType_DeviceType_MIN;
  static constexpr DeviceType DeviceType_MAX = SensorConfiguration_DeviceType_DeviceType_MAX;
  static constexpr int DeviceType_ARRAYSIZE = SensorConfiguration_DeviceType_DeviceType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* DeviceType_descriptor() {
    return SensorConfiguration_DeviceType_descriptor();
  }
  template <typename T>
  static inline const std::string& DeviceType_Name(T value) {
    return SensorConfiguration_DeviceType_Name(value);
  }
  static inline bool DeviceType_Parse(absl::string_view name, DeviceType* value) {
    return SensorConfiguration_DeviceType_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kIpFieldNumber = 2,
    kPortFieldNumber = 3,
    kInitLatitudeFieldNumber = 4,
    kInitLongitudeFieldNumber = 5,
    kTypeFieldNumber = 6,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string ip = 2;
  void clear_ip() ;
  const std::string& ip() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ip(Arg_&& arg, Args_... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* value);

  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(
      const std::string& value);
  std::string* _internal_mutable_ip();

  public:
  // string port = 3;
  void clear_port() ;
  const std::string& port() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_port(Arg_&& arg, Args_... args);
  std::string* mutable_port();
  PROTOBUF_NODISCARD std::string* release_port();
  void set_allocated_port(std::string* value);

  private:
  const std::string& _internal_port() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_port(
      const std::string& value);
  std::string* _internal_mutable_port();

  public:
  // int32 initLatitude = 4;
  void clear_initlatitude() ;
  ::int32_t initlatitude() const;
  void set_initlatitude(::int32_t value);

  private:
  ::int32_t _internal_initlatitude() const;
  void _internal_set_initlatitude(::int32_t value);

  public:
  // int32 initLongitude = 5;
  void clear_initlongitude() ;
  ::int32_t initlongitude() const;
  void set_initlongitude(::int32_t value);

  private:
  ::int32_t _internal_initlongitude() const;
  void _internal_set_initlongitude(::int32_t value);

  public:
  // .SensorConfiguration.DeviceType type = 6;
  void clear_type() ;
  ::SensorConfiguration_DeviceType type() const;
  void set_type(::SensorConfiguration_DeviceType value);

  private:
  ::SensorConfiguration_DeviceType _internal_type() const;
  void _internal_set_type(::SensorConfiguration_DeviceType value);

  public:
  // @@protoc_insertion_point(class_scope:SensorConfiguration)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      38, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr ip_;
    ::google::protobuf::internal::ArenaStringPtr port_;
    ::int32_t initlatitude_;
    ::int32_t initlongitude_;
    int type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_configuration_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SensorConfiguration

// string name = 1;
inline void SensorConfiguration::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& SensorConfiguration::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:SensorConfiguration.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SensorConfiguration::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:SensorConfiguration.name)
}
inline std::string* SensorConfiguration::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:SensorConfiguration.name)
  return _s;
}
inline const std::string& SensorConfiguration::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void SensorConfiguration::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* SensorConfiguration::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* SensorConfiguration::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:SensorConfiguration.name)
  return _impl_.name_.Release();
}
inline void SensorConfiguration::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SensorConfiguration.name)
}

// string ip = 2;
inline void SensorConfiguration::clear_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ip_.ClearToEmpty();
}
inline const std::string& SensorConfiguration::ip() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:SensorConfiguration.ip)
  return _internal_ip();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SensorConfiguration::set_ip(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ip_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:SensorConfiguration.ip)
}
inline std::string* SensorConfiguration::mutable_ip() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:SensorConfiguration.ip)
  return _s;
}
inline const std::string& SensorConfiguration::_internal_ip() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ip_.Get();
}
inline void SensorConfiguration::_internal_set_ip(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ip_.Set(value, GetArena());
}
inline std::string* SensorConfiguration::_internal_mutable_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.ip_.Mutable( GetArena());
}
inline std::string* SensorConfiguration::release_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:SensorConfiguration.ip)
  return _impl_.ip_.Release();
}
inline void SensorConfiguration::set_allocated_ip(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ip_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ip_.IsDefault()) {
          _impl_.ip_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SensorConfiguration.ip)
}

// string port = 3;
inline void SensorConfiguration::clear_port() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.port_.ClearToEmpty();
}
inline const std::string& SensorConfiguration::port() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:SensorConfiguration.port)
  return _internal_port();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SensorConfiguration::set_port(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.port_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:SensorConfiguration.port)
}
inline std::string* SensorConfiguration::mutable_port() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_port();
  // @@protoc_insertion_point(field_mutable:SensorConfiguration.port)
  return _s;
}
inline const std::string& SensorConfiguration::_internal_port() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.port_.Get();
}
inline void SensorConfiguration::_internal_set_port(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.port_.Set(value, GetArena());
}
inline std::string* SensorConfiguration::_internal_mutable_port() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.port_.Mutable( GetArena());
}
inline std::string* SensorConfiguration::release_port() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:SensorConfiguration.port)
  return _impl_.port_.Release();
}
inline void SensorConfiguration::set_allocated_port(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.port_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.port_.IsDefault()) {
          _impl_.port_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SensorConfiguration.port)
}

// int32 initLatitude = 4;
inline void SensorConfiguration::clear_initlatitude() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.initlatitude_ = 0;
}
inline ::int32_t SensorConfiguration::initlatitude() const {
  // @@protoc_insertion_point(field_get:SensorConfiguration.initLatitude)
  return _internal_initlatitude();
}
inline void SensorConfiguration::set_initlatitude(::int32_t value) {
  _internal_set_initlatitude(value);
  // @@protoc_insertion_point(field_set:SensorConfiguration.initLatitude)
}
inline ::int32_t SensorConfiguration::_internal_initlatitude() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.initlatitude_;
}
inline void SensorConfiguration::_internal_set_initlatitude(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.initlatitude_ = value;
}

// int32 initLongitude = 5;
inline void SensorConfiguration::clear_initlongitude() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.initlongitude_ = 0;
}
inline ::int32_t SensorConfiguration::initlongitude() const {
  // @@protoc_insertion_point(field_get:SensorConfiguration.initLongitude)
  return _internal_initlongitude();
}
inline void SensorConfiguration::set_initlongitude(::int32_t value) {
  _internal_set_initlongitude(value);
  // @@protoc_insertion_point(field_set:SensorConfiguration.initLongitude)
}
inline ::int32_t SensorConfiguration::_internal_initlongitude() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.initlongitude_;
}
inline void SensorConfiguration::_internal_set_initlongitude(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.initlongitude_ = value;
}

// .SensorConfiguration.DeviceType type = 6;
inline void SensorConfiguration::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = 0;
}
inline ::SensorConfiguration_DeviceType SensorConfiguration::type() const {
  // @@protoc_insertion_point(field_get:SensorConfiguration.type)
  return _internal_type();
}
inline void SensorConfiguration::set_type(::SensorConfiguration_DeviceType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:SensorConfiguration.type)
}
inline ::SensorConfiguration_DeviceType SensorConfiguration::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::SensorConfiguration_DeviceType>(_impl_.type_);
}
inline void SensorConfiguration::_internal_set_type(::SensorConfiguration_DeviceType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::SensorConfiguration_DeviceType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::SensorConfiguration_DeviceType>() {
  return ::SensorConfiguration_DeviceType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_configuration_2eproto_2epb_2eh
